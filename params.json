{"name":"Quick Start WordPress for Google App Engine","tagline":"A guide for running WordPress on Google App Engine","body":"## Prerequisites\r\n\r\n1. Install the [PHP SDK for Google App Engine](https://developers.google.com/appengine/downloads#Google_App_Engine_SDK_for_PHP)\r\n2. Install [MySQL](http://dev.mysql.com/downloads/)\r\n3. [Sign up](http://cloud.google.com/console) for a Google Cloud Platform project, and\r\nset up a Cloud SQL instance, as described [here](https://developers.google.com/cloud-sql/docs/instances), and a \r\nCloud Storage bucket, as described [here](https://developers.google.com/storage/docs/signup). You'll want to name \r\nyour Cloud SQL instance \"wordpress\" to match the config files provided here.\r\n\r\n## Setup\r\n\r\nEdit `wp-config.php` and `app.yaml`, replacing `YOUR_PROJECT_ID` to match the Project ID (not the name) you entered\r\nin the Cloud Console when you signed up for a Google Cloud Platform project.\r\n\r\n## Running WordPress locally\r\n\r\nUsing MySQL, run `databasesetup.sql` to set up your local database. For a default installation (no root password) \r\nthis would be: \r\n\r\n    /usr/local/mysql/bin/mysql -u root < databasesetup.sql\r\n    \r\nBut really, all it's doing is running this line -- the WordPress installation script will do the heavy lifting when it comes to setting up your database. \r\n\r\n    CREATE DATABASE IF NOT EXISTS wordpress_db;\r\n\r\nTo run WordPress locally on Windows and OS X, you can use the \r\n[Launcher](https://developers.google.com/appengine/downloads#Google_App_Engine_SDK_for_PHP) \r\nby going to **File > Add Existing Project** or you can run one of the commands below. \r\n\r\nOn Mac and Windows, the default is to use the PHP binaries bundled with the SDK:\r\n\r\n    $ dev_appserver.py path_to_this_directory\r\n    \r\nNow, with App Engine running locally, visit `http://localhost:8080/wp-admin/install.php` in your browser and run  the setup process, changing the port number from 8080 if you aren't using the default. \r\nYou should be able to log in, and confirm that your app is ready to deploy. \r\n\r\n### Deploy!\r\n\r\nIf all looks good, you can upload your application using the Launcher or by using this command:\r\n\r\n    $ appcfg.py update APPLICATION_DIRECTORY\r\n    \r\nJust like you had to do with the local database, you'll need to set up the Cloud SQL instance. The SDK includes\r\na tool for doing just that:\r\n\r\n    google_sql.py <PROJECT_ID>:wordpress\r\n    \r\nThis launches a browser window that authorizes the `google_sql.py` tool to connect to your Cloud SQL instance. After clicking **Accept**, you can return to the command prompt, which has entered into the SQL command tool and is now connected to your instance. Next to `sql>`, enter this command:\r\n\r\n    CREATE DATABASE IF NOT EXISTS wordpress_db;    \r\n    \r\nYou should see that it inserted 1 row of data creating the database. You can now type `exit` -- we're done here.\r\n\r\nNow, just like you did when WordPress was running locally, you'll need to run the install script by visiting:\r\n\r\n    http://<PROJECT_ID>.appspot.com/wp-admin/install.php\r\n\r\n## You're done!\r\n\r\nCongratulations! You should now have a blog that loads rapidly, caches elegantly, \r\nsends email properly, and can support adding images and other media to blog posts! Most importantly, \r\nit will take advantage of Google's incredibly powerful infrastructure and scale gracefully to\r\naccomodate traffic that is hitting your blog.","google":"UA-63003582-4","note":"Don't delete this file! It's used internally to help with page regeneration."}